import rdflib
import tkinter as tk
from tkinter import messagebox

class OntologySearch:
    def __init__(self, ontology_file):
        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå RDF/OWL
        self.g = rdflib.Graph()
        self.g.parse(ontology_file, format="xml")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

    def search_info(self, keyword):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SPARQL query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
        query = f"""
            PREFIX : <http://www.my_ontology.edu/mytourism#>
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

            SELECT ?subject ?property ?value WHERE {{
                ?subject ?property ?value .
                FILTER (
                    regex(str(?subject), "{keyword}", "i") || 
                    regex(str(?value), "{keyword}", "i") || 
                    regex(str(?property), "{keyword}", "i")
                )
                FILTER (?property IN (:hasFlower, :hasImageOfProvince, :hasLatitudeOfProvince, :hasLongitudeOfProvince, :hasMotto, :hasNameOfProvince, :hasSeal, :hasTraditionalNameOfProvince, :hasTree, :hasURLOfProvince))
            }}
        """
        
        results = self.g.query(query)
        data = {}

        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô dictionary
        for row in results:
            subject = str(row.subject).split("#")[-1]  # ‡πÄ‡∏≠‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å URI
            property_name = str(row.property).split("#")[-1]
            value = str(row.value)

            if subject not in data:
                data[subject] = []
            data[subject].append(f"üîπ {property_name}: {value}")

        return data

    def get_full_info(self, subject):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SPARQL query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö
        query = f"""
            PREFIX : <http://www.my_ontology.edu/mytourism#>
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

            SELECT ?property ?value WHERE {{
                :{subject} ?property ?value .
                FILTER (?property IN (:hasFlower, :hasImageOfProvince, :hasLatitudeOfProvince, :hasLongitudeOfProvince, :hasMotto, :hasNameOfProvince, :hasSeal, :hasTraditionalNameOfProvince, :hasTree, :hasURLOfProvince))
            }}
        """

        results = self.g.query(query)
        full_data = []
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö
        for row in results:
            property_name = str(row.property).split("#")[-1]
            value = str(row.value)
            full_data.append(f"üîπ {property_name}: {value}")

        return full_data

    def show_results(self, data):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡∏Ç‡∏≠‡∏á Pop-up ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result_text = ""
        for subject, properties in data.items():
            result_text += f"üìç {subject}:\n"
            for property in properties:
                result_text += f"  {property}\n"
            
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ
            full_info = self.get_full_info(subject)
            if full_info:
                result_text += "\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:\n"
                result_text += "\n".join(full_info) + "\n"
            result_text += "\n"

        # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á Pop-up
        if result_text:
            messagebox.showinfo("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", result_text)
        else:
            messagebox.showinfo("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")

    def search_and_display(self, keyword):
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        data = self.search_info(keyword)
        self.show_results(data)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á GUI
def main():
    ontology_file = "mytourism.owl"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå OWL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    app = OntologySearch(ontology_file)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    root = tk.Tk()
    root.title("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß")

    tk.Label(root, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:").pack(pady=10)
    search_entry = tk.Entry(root)
    search_entry.pack(pady=10)

    def on_search():
        keyword = search_entry.get()
        if keyword:
            app.search_and_display(keyword)
        else:
            messagebox.showwarning("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

    search_button = tk.Button(root, text="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", command=on_search)
    search_button.pack(pady=10)

    root.mainloop()

if __name__ == "__main__":
    main()
